---
layout: post
title:  "Пройти собеседование JavaScript: Что такое замыкание (Closure)?"
date:   2016-12-22 10:00 +0300
categories: tutorials
tags: javascript
related_courses: js_basic js_advanced

---
Автор: Эрик Эллиот.

Оригинальная статья здесь: [Master the JavaScript Interview: What is a Closure?](https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-closure-b2f0d2152b36#.l9ja1sb3o)

# Пройти собеседование JavaScript: Что такое замыкание (Closure)?
<blockquote>Если вы не можете ответить на этот вопрос, вы junior. И мне не важно как долго вы программируете.</blockquote>

“Пройти собеседование JavaScript” - это серия публикаций предназначенных для подготовки кандидатов на вакансии от mid до senior JavaScript разработчика к вопросами, которые им вероятнее всего зададут на собеседовании. Эти вопросы я часто использую в реальных собеседованиях. Я начинаю эту серию с вопроса, который я задаю первым, а часто и последним, когда провожу собеседования.Честно говоря, вы не сможете далеко продвинуться в JavaScript без знания о замыканиях. 

Вы можете делать что-то, но сможете ли вы по-настоящему понять как построить серьезное приложение на JavaScript? Сможете ли вы на самом деле понять, что происходит и как приложение работает? Я сомневаюсь. Если вы не знаете ответа на этот вопрос, для меня это серьезный показатель.

Вы не только должны знать принципы работы замыкания, но вы обязаны понимать почему это важно и должны уметь с легкостью представить несколько примеров использования замыкания. Замыкания часто используются для сокрытия данных в объектах JavaScript, в обработчиках событий и в колбеках, в частичном применении (partial application), каррировании, а также других паттернах функционального программирования.

<blockquote>Меня не интересует знает ли кандидат, что значит слово “замыкание” или его техническое определение. Я хочу выяснить понимает ли он основные принципы работы замыкания. Если не понимает, для меня это ясный признак, того что разработчик не имеет богатого опыта работы в реализации реальных JavaScript приложений.</blockquote>

Я представлю короткое заключение на тему: “Можете ли вы назвать два распространенных применения для замыкания?”

### <span class="icon-homecode" id="one" data-magellan-target="one"></span> Что такое замыкание?

В двух словах, замыкание - это комбинация функции тесно связанной с (замкнутой) со ссылкой на ее состояние (лексическое окружение). В JavaScript, замыкание создается каждый раз, когда создается функция, в то самое время, когда функция создается. 
Это основной принцип работы, но что это значит? На практике это означает, что поскольку замыкание связывает лексическое окружение, у внутренней функции есть доступ к области видимости внешней функции. Для того, чтобы использовать замыкание, необходимо просто определить одну функцию внутри другой и возвратить ее или передать в другую функцию. 

Эта внутренняя функция будет иметь доступ к переменным внешней функции, даже после того, как внешняя функция отработала.

### <span class="icon-homecode" id="two" data-magellan-target="two"></span> Примеры использования замыкания.
Кроме прочего, замыкания часто используются для сокрытия данных в объектах.
Сокрытие данных необходимо для того, чтобы мы могли программировать согласно интерфейсу, а не конкретной реализации. Это важная концепция, которая позволяет нам строить более надежные программы, так как нюансы конкретной реализации скорее всего изменяется, тогда как интерфейс меняется гораздо реже. 

<blockquote>Программируйте согласно интерфейсу, а не конкретной реализации
<footer><cite><a href="http://www.piter.com/product/priemy-obektno-orientirovannogo-proektirovaniya">Приемы объектно-ориентированного проектирования. Паттерны проектирования.</a></cite></footer></blockquote>

В JavaScript, замыкания - это основной способ для того, чтобы реализовать скрытие данных. Когда вы используете замыкание, инкапсулированные переменные находятся в локальной области видимости.
Вы не сможете доступиться до данных, иначе как через специальные методы объекта.
В JavaScript, таким специальным методом будет любой метод, который возвращается из замыкания.

[Пример (по ссылке оригинальный источник)](https://gist.github.com/ericelliott/2b624243f030405abe0c#file-data-privacy-example-js)

<p data-height="265" data-theme-id="0" data-slug-hash="woZLVe" data-default-tab="js,result" data-user="webcamp" data-embed-version="2" data-pen-title="woZLVe" class="codepen">See the Pen <a href="http://codepen.io/webcamp/pen/woZLVe/">woZLVe</a> by webcamp (<a href="http://codepen.io/webcamp">@webcamp</a>) on <a href="http://codepen.io">CodePen</a>.</p>
<script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script>

В приведенном примере, метод `.get()`  определен в области видимости метода `getSecret()`, он имеет доступ ко всем переменным из `getSecret()` и является специальным методом для сокрытия данных, в этом случае, параметра `secret`.

Объекты - это не единственный способ реализовать локализацию данных. Замыкания также могут использоваться для создания функций с состоянием, где возвращаемые данные которых могут изменяться в зависимости от внутреннего состояния, например:

<p data-height="265" data-theme-id="0" data-slug-hash="xRevxo" data-default-tab="js,result" data-user="webcamp" data-embed-version="2" data-pen-title="xRevxo" class="codepen">See the Pen <a href="http://codepen.io/webcamp/pen/xRevxo/">xRevxo</a> by webcamp (<a href="http://codepen.io/webcamp">@webcamp</a>) on <a href="http://codepen.io">CodePen</a>.</p>
<script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script>

В функциональном программировании, замыкания часто используются для частичного применения и каррирования. Здесь необходимо дать некоторые определения:

**Применение**: Процесс применения к функции ее аргументов, для того чтобы произвести возвращаемое значение.

**Частичное применение**: Процесс применения к функции части ее аргументов.
Сама функция с частичным применением возвращается для дальнейшего использования.
Другими словами, это **функция**, которая **принимает другую функцию со множеством параметров** и **возвращает третью функцию с меньшим количеством параметров**.
Частичное применение закрепляет (частично применяет к функции) один или более параметров внутри возвращаемой функции, а возвращенная функция принимает оставшиеся параметры как аргументы для того, что полностью применить изначальное количество аргументов.

Частичное применения пользуется возможностями замыкания для фиксирования параметров.
Вы можете написать в общем виде функцию, которая будет частично применять аргументы к исходной функции. У нее будет такая сигнатура:

```
partialApply(targetFunction: Function, ...fixedArgs: Any[]) =>
  functionWithFewerParams(...remainingArgs: Any[])
```
Если вам нужна помощь в чтении этой сигнатуры, смотрите [Rtype: Reading Function Signatures](https://github.com/ericelliott/rtype#reading-function-signatures)

Она принимает функцию, которая принимает любое количество аргументов, затем аргументы, которые мы хотим частично применить к исходной функции и возвращает другую функцию, которая примет оставшиеся аргументы.
Пример всегда помогает, допустим, у вас есть два числа: `const add = (a, b) => a + b;` Теперь вам нужна функция, которая добавляет 10 к любому числу. Назовем ее `add10()`. Результатом `add10(5)` должно быть `15`. 
Наша `partialApply()` может это сделать 

```javascript
const add10 = partialApply(add, 10); 
add10(5); 
```

В этом примере, аргумент  `10` становится фиксированным параметром, который запоминается внутри замыкания `add10()`.

Давайте посмотрим на возможную имплементацию `partialApply()`

[Пример (по ссылке оригинальный источник)](https://gist.github.com/ericelliott/f0a8fd662111ea2f569e#file-partial-apply-js)

<p data-height="345" data-theme-id="0" data-slug-hash="mOgNVO" data-default-tab="js,result" data-user="webcamp" data-embed-version="2" data-pen-title="partial apply" class="codepen">See the Pen <a href="http://codepen.io/webcamp/pen/mOgNVO/">partial apply</a> by webcamp (<a href="http://codepen.io/webcamp">@webcamp</a>) on <a href="http://codepen.io">CodePen</a>.</p>
<script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script>

Как видите, она просто возвращает функцию, которая продолжает иметь доступ к аргументам `fixedArgs`, которые были переданы в функцию `partialApply()`.

------------------------------------------------------------------------------------------------------------------------------------------------------

Как работает JavaScript мы рассказываем на таких курсах:

- [Курс JavaScript Basic](https://www.webcamp.com.ua/courses/js_basic)
- [Курс JavaScript Advanced](https://www.webcamp.com.ua/courses/js_advanced)
- [Курс JavaScript DOM](https://www.webcamp.com.ua/courses/js_dom)

---

### Ваш ход
А для чего вы используете замыкания? Напишите мне о вашем любимом способе использовать замыкания.

Эрик Эллиот, автор “Programming JavaScript Applications” (O’Reilly), and “Learn Universal JavaScript App Development with Node & React”, участвует в проектах Adobe Systems, Zumba Fitness, The Wall Street Journal, ESPN, BBC.


