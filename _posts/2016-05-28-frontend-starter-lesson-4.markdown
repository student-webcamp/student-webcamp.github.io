---
layout: post
title:  "Frontend Starter 4: Основные теги для работы с текстом"
date:   28.05.2016 20:07 +0300
categories: tutorials
tags: frontend_starter
fbimg: https://lh6.googleusercontent.com/-pSsElPpuuJU/V0SSYRXSXDI/AAAAAAAAAcQ/gVA-XkbODJw_WePoeTuAd-pEu0vZp418gCLIB/w1118-h587-no/
related_courses: frontend_starter frontend_basic
level: 1
---

# Блочные и строчные элементы

В HTML есть два базисных понятия элемента: **блочный** элемент и **строчный** элемент.

Блочные элементы (**block elements**) являются основными элементами разметки. Это `<html>` `<head>` `<body>` `<div>` `<p>` и прочие.

Строчные элементы (**inline elements**) размечают некоторую часть содержимого блочного элемента. Это теги `<span>` `<a>` `<code>` и другие.

В этом уроке мы познакомимся с блочными и строчными элементами **для разметки текста**.

### <span class="icon-homecode" id="heading" data-magellan-target="heading"></span> Заголовки

Самая важная информация на странице - это заголовок. Именно он содержит основной тезис содержимого страницы и привлекает пользователя.

В HTML есть 6 тегов для заголовков, от самого важного до самого простого:

```html
<h1> Заголовок 1 </h1>
<h2> Заголовок 2 </h2>
<h3> Заголовок 3 </h3>
<h4> Заголовок 4 </h4>
<h5> Заголовок 5 </h5>
<h6> Заголовок 6 </h6>
```

А вот так этот код выглядит в браузере:

![Заголовки HTML](/img/Frontend_Starter/headings.png)

- Обычно, на странице требуется не более трёх уровней заголовков. На этой странице используются заголовки `<h1>` `<h3>` и `<h5>` 
- Стандартный вид заголовков переопределяется стилями CSS
- Имя тега **h1** -- это сокращение от аглийского **heading level 1** или *заголовок первого уровня*

### <span class="icon-homecode" id="paragraph" data-magellan-target="paragraph"></span> Параграфы

**Параграф** или абзац -- структурная единица текста, удобная для чтения. Для разметки блоков текста на абзацы используется тег `<p>` сокращение от анлийского **paragraph**.

```html
<p>Это первый абзац текста.</p>
<p>Это второй абзац. Если в параграфе будет текста больше, чем влезает в размер блока по ширине, то он будет переносится на новую строку по словам.</p>
<p>Это третий параграф. У всех параграфов есть отступ по высоте от других элементов (по умолчанию).</p>
```

Результат в браузере:

![Абзац HTML](/img/Frontend_Starter/paragraph.png)

- Не стоит оборачивать параграфы в заголовки и наоборот. Это отдельные структурные элементы

Стоит заметить, что **все** множественные пробелы, табуляции и символы переноса строк при обработке HTML браузером **будут заменены на одиночный пробел**. Например, такой код исходного файла:

```html
<p>    здесь в контейнере
хранится           текст,         который
            содержит табуляцию 
            и
         переносы
      строк
      </p>
```      

... будет обработан браузером в такой текст:

![Переносы строк в HTML](/img/Frontend_Starter/paragraph_1.png)

Для разрыва строки символом переноса на новую строку используется непарный тег `<br>` 

```html
<p>
Первая строка текста. <br>
Вторая строка текста. <br>
Третья строка текста. <br>
</p>
```
Результат: 

![Тег br в HTML](/img/Frontend_Starter/paragraph_2.png)

- Тег `<br>` можно записывать и так `<br />`, обе записи являются корректными
- Тег `<br>` используется только для переноса строк внутри параграфа
- Не стоит использоват `<br>` для формирования отступов между элементами
- Тег `<br>` -- это сокращение от английского **brake row** или *разрыв строки*

Для сохранения форматирования текста и отображения на веб-странице символов отступа и переноса строк используется специальный тег `<pre>`. Этот тег определяет *форматированный текст* от английского **preformatted text**.

Заменим в предыдущем примере `<p>` тегом `<pre>` 

```html
<pre>    здесь в контейнере
хранится           текст,         который
            содержит табуляцию 
            и
         переносы
      строк
</pre>
```

Результат в браузере:

![Тег pre в HTML](/img/Frontend_Starter/paragraph_3.png)

- Тег `<pre>` удобно использовать, когда необходимо вывести заранее отформатированый текст
- Все примеры кода в этом руководстве выводятся в теге `<pre>`
- По умолчанию содержимое контейнера `<pre>` выводится *моноширинным* шрифтом

### <span class="icon-homecode" id="inline" data-magellan-target="inline"></span> Строчные элементы

Строчные или *inline* элементы используются для дополнительной разметки текста внутри блочных элементов.

Перечень строчных тегов [доступен по ссылке.](http://devdocs.io/html/inline_elements)

### <span class="icon-homecode" id="bold" data-magellan-target="bold"></span> Жирный текст

Тег `<b>` от английского **bold** или *жирный* определяет просто жирный текст:

```html
<p>Это обычный текст</p>
<p><b>А это жирный текст</b></p>
<p>Это обычный и <b>жирный</b> текст в одном контейнере</p>
```

Результат в браузере:

![Тег b в HTML](/img/Frontend_Starter/paragraph_4.png)

Тег `<strong>` отмечает **важный** текст в параграфе, по умолчанию выводится как жирный. От английского **strong** -- *сильный* :

```html
<p>Это обычный текст</p>
<p>Это просто <b>жирный текст</b></p>
<p>Это <strong>важный текст</strong> в блоке текста</p>
```
Результат в браузере:


![Тег strong в HTML](/img/Frontend_Starter/paragraph_5.png)

- Текст в теге `<strong>` будет иметь более высокий приоритет при обработке страницы поисковыми роботами
- Текст в теге `<b>` будет иметь такой же приоритет как и обычный текст

### <span class="icon-homecode" id="italic" data-magellan-target="italic"></span> Курсивный текст

Тег `<i>` от английского **italic** или *курсив* определяет просто курсивный текст.

Тег `<em>` отмечает **акцентированный** текст в параграфе, по умолчанию выводится курсивом. От английского **emphasized** -- *акцентированный* :

```html
<p>Это обычный текст</p>
<p>Это просто <i>курсивный текст</i></p>
<p>Это <em>акцентированный текст</em> в блоке текста</p>
```

Результат в браузере:

![Теги i и em в HTML](/img/Frontend_Starter/paragraph_6.png)

- Текст в теге `<em>` будет иметь более высокий приоритет при обработке страницы поисковыми роботами
- Текст в теге `<i>` будет иметь такой же приоритет как и обычный текст

### <span class="icon-homecode" id="small" data-magellan-target="small"></span> Дополнительный текст

Дополнительный текст обычно используется как *подзаголовок*. Тег `<small>` уменьшает размер шрифта.

```html
<h1>Очень важный заголовок <small> с подзаголовком </small> </h1>
```
Результат в браузере:

![Тег small в HTML](/img/Frontend_Starter/paragraph_7.png)

### <span class="icon-homecode" id="mark" data-magellan-target="mark"></span> Выделенный текст

Для того чтобы <mark>выделить</mark> или *подсветить* текст используется тег `<mark>` от английского **mark** -- *отметить*:
 
```html
<p>В этом тексте <mark>необходимо отметить</mark> два слова</p>
```

- Отмечайте только редкие фрагменты текста -- иначе он будет нечитаемым

### <span class="icon-homecode" id="lined" data-magellan-target="lined"></span> Зачеркнутый и подчеркнутый текст

Содержимое тега `<del>` отбражается <del>перечеркнутым</del> текстом, от английского **deleted** -- *удалённый* текст:

```html
<p>Моя любимая машина <del>Жигули</del> Феррари </p>
```

Содержимое тега `<ins>` отображается <ins>подчеркнутым</ins> текстом, от английского **inserted** -- *добавленный* текст:

```html
<p>У меня опыт работы <ins>10</ins> лет </p>
```

- Чтобы получить зачеркнутый курсив просто оберните ваш текст в оба необходимых тега.

### <span class="icon-homecode" id="sub" data-magellan-target="bold"></span> Текст в индексе

Тег `<sub>` используется для отображения текста <sub>в нижнем</sub> индексе. От английского **subscript** -- *нижний индекс* 

```html
<p>Это текст <sub>в нижнем</sub> индексе</p>
```

Тег `<sup>` используется для отображения текста <sup>в верхнем</sup> индексе. От английского **superscript** -- *верхний индекс* 

```html
<p>Это текст <sup>в верхнем</sup> индексе</p>
```

- Эти теги отлично подходят для отображения формул

### <span class="icon-homecode" id="comp" data-magellan-target="comp"></span> Компьютерный код

Для отображения компьютерного кода используется тег `<code>`. Чтобы сохранить форматирование необходимо обернуть его в тег `<pre>`:

```html
<pre>
<code>
var x = 5;
var y = 6;
document.getElementById("demo").innerHTML = x + y;
</code>
</pre>
```

Результат:
<pre>
var x = 5;
var y = 6;
document.getElementById("demo").innerHTML = x + y;
</pre>

Для отображения вывода компьютерной программы в консоль используется тег `<samp>` от английского **sample** -- *пример*:

```html
<samp>
demo.example.com login: Apr 12 09:10:17
Linux 2.6.10-grsec+gg3+e+fhs6b+nfs+gr0501+++p3+c4a+gr2b-reslog-v6.189
</samp>
```

Результат:

<samp>demo.example.com login: Apr 12 09:10:17 Linux 2.6.10-grsec+gg3+e+fhs6b+nfs+gr0501+++p3+c4a+gr2b-reslog-v6.189</samp>

Для отображения комбинации клавиш, которую необходимо нажать используется теш `<kbd>` от английского **keyboard** -- *клавиатура*

```html
<p>Нажмите <kbd>Alt + Ctrl + Del</kbd></p>
```

Результат: 

Нажмите <kbd>Alt + Ctrl + Del</kbd>

Для разметки переменных используется тег `<var>` от английского **variable** -- *переменная*. Комбинация строчных элементов позволяет оформлять формулы:

```html
И сказал Эйнштейн: <var>E</var> = <var>m</var><var>c</var><sup>2</sup>.
```

Как результат:

И сказал Эйнштейн: <var>E</var> = <var>m</var><var>c</var><sup>2</sup>.

- Попробовать код из урока можно на [jsFiddle](https://jsfiddle.net/up8zbyee/)
- Больше полезных статей на [Student Webcamp](/)
