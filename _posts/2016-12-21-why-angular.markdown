---
layout: post
title:  "Почему Angular?"
date:   2016-12-21 10:00 +0300
categories: tutorials
tags: javascript
related_courses: angular js_advanced

---
Автор: [Жукова Елена](https://ua.linkedin.com/in/helenzhukova)
# 5 причин, почему Angular поменял правила игры веб разработки и сделал зарплату фронтенд разработчика втрое выше.
<blockquote>Angular стал поистине революционным решением для своего времени и сделал для отрасли веб приложений не меньше, чем AJAX в свое время. Благодаря Angular вся отрасль сменила “Jquery-plugin” паттерн разработки на MVC-like паттерн и заявила о себе, как серьезном повороте во взгляде на веб приложения.</blockquote>


### <span class="icon-homecode" id="one" data-magellan-target="one"></span> Причина 1: Two Way Data-Binding (Двусторонняя привязка данных)
В первую очередь Angular представил так называемый Two Way Data-Binding (Двусторонняя привязка данных), что позволяет менять вашу модель прямо из HTML без каких-либо дополнительных обработок со стороны разработчика. 
До Angular вам нужно было считывать ввод пользователя из input элемента, а затем, в обработчике событий передавать его в модель.


С Angular это делать не нужно. В минимальном виде, вам не нужно вообще ничего предпринимать чтобы, передать данные от пользователя в модель.

### <span class="icon-homecode" id="two" data-magellan-target="two"></span> Причина 2: Шаблоны.

До Angular, мы использовали в основном что-то типа ```innerHTML = "<div>...</div>"``` для небольшой вставки в HTML или решения типа Handlebars, Jade, Underscore JST, что по сути тоже самое - манипуляция строками. Angular в этом плане тоже стал революционером, он использует реальный DOM для своих шаблонов. Он фактически компилирует ваш шаблон в DOM дерево, благодаря чему вышеупомянутая двусторонняя привязка данных работает как магия. 
Этот подход идеально сочетается с RESTful архитектурой приложения, поэтому, с появлением Angular сервер мог совсем забыть о рендере HTML, всю работу по представлению стало возможно переложить на сторону клиента.

Вот базовый пример шаблона + two-way data binding реализованный на Angular v1. Попробуйте ввести в поле для ввода любые данные и вы увидите как они моментально появятся в HTML без какого-либо усилия с моей стороны.

<p data-height="265" data-theme-id="0" data-slug-hash="NbJENp" data-default-tab="html,result" data-user="webcamp" data-embed-version="2" data-pen-title="Why AngularJS" class="codepen">See the Pen <a href="http://codepen.io/webcamp/pen/NbJENp/">Why AngularJS</a> by webcamp (<a href="http://codepen.io/webcamp">@webcamp</a>) on <a href="http://codepen.io">CodePen</a>.</p>
<script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script>

### <span class="icon-homecode" id="three" data-magellan-target="three"></span> Причина 3: Менеджер зависимостей (Dependency Injection)

До появления Angular управлять зависимостями в JavaScript пытался только RequireJS, который не слишком хорошо справлялся с масштабированием. Angular предложил свою систему внедрения зависимостей, она реализовывалась похожим способом - через добавление параметров в функцию, но оказалась более гибкой чем RequireJS. 
                                                                            Angular2 уже полагается на возможности import ES6 и TypeScript, но на момент, когда эта возможность была только в проекте, Angular первый сделал очень годную реализацию внедрения зависимостей.

Так выглядит внедрение зависимостей для настройки проекта в Angular v1

```javascript
/* Angular v1 */
angular.module('myApp', [
  //dependencies
  'ngRoute', 
  'myApp.view1',
  'myApp.view2',
  'myApp.version'
]).
config(['$locationProvider', '$routeProvider',//dependencies 
        function($locationProvider, $routeProvider) {
          $locationProvider.hashPrefix('!');
          $routeProvider.otherwise({redirectTo: '/view1'});
        }]);
```

### <span class="icon-homecode" id="four" data-magellan-target="four"></span> Причина 4: MV*

В сфере разработки программного обеспечения за 3 десятилетия утвердилось мнение, что настоящее приложение должно быть разделено на три части: Модель (данные), Представление и Контроллер, так называемый шаблон MVC.
И до недавнего времени все знали, что JavaScript не может этого достичь. Хоть Angular и не был первым, кто принял этот шаблон, но он точно способствовал развитию JavaScript MV* фреймворков, которые стали стандартом фронтенд разработки. 

AngularJS не реализует MVC в традиционном понимании этого слова, а скорее что-то ближе к MVVM (Model-View-ViewModel).
Модель - простые объекты JavaScript. 
Модель-представление является объектом, который содержит конкретные данные и методы для поддержания конкретных представлений(views).

ViewModel в первом Angular реализована как $scope (область данных), которая живет внутри приложения AngularJS. $scope - всего лишь простой объект JavaScript с небольшим API предназначен для обнаружения и вещания изменений в его состояние.
Контроллер отвечает за установку начального состояния и расширения $scope методами для управления поведением. Стоит отметить, что контроллер не хранит состояние и не взаимодействует с удаленными сервисами.

Angular2 уже стал ближе к классическому MVC в том плане, что модель стала активной - теперь это ES6 class который не просто описывает данные, но и предоставляет методы работы с ними, начальное состояние - это ваша модель, а компонент-конструктор отвечает за связывание действий пользователя с данными модели.
Представление - это HTML, который получается после того, как AngularJS произвел синтаксический анализ и скомпилировал HTML, чтобы включить обработанную разметку и привязку данных.

### <span class="icon-homecode" id="five" data-magellan-target="five"></span> Причина 5: Тестирование

Команда AngularJS убеждена, что любой код, написанный на JavaScript должен сопровождаться серьезным набором тестов. Они разрабатывали AngularJS с мыслью о тестируемости, так чтобы тестирование ваших приложений на AngularJS было как можно проще. Так что нет никакого оправдания не делать этого.

Учитывая тот факт, что JavaScript является динамичным и интерпретируется, а не компилируется, для разработчиков чрезвычайно важно принять правила дисциплинированного подхода для написания тестов.

Таким образом, Angular в значительной мере повлиял на стандарты веб разработки в свое время, а вторая версия фреймворка продолжает задавать направление движения всей отрасли. Если в ваших жизненных планах быть серьезным фронтенд разработчиком, не стоит отказываться от изучения Angular. 

---

Как сделать веб приложение мы рассказываем на таких курсах:

- [Курс AngularJS](https://www.webcamp.com.ua/courses/angular)
- [Курс для желающих осознать глубины вёрстки](https://www.webcamp.com.ua/courses/frontend_basic)
- [Быстрокурс по Bootstrap](https://www.webcamp.com.ua/courses/boostrap)